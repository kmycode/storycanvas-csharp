{"Name":"HockeyApp for Android","Id":3060,"Alias":"hockeyappandroid","Description":"HockeyApp is a platform to collect live crash reports, get feedback from your users, distribute your betas, recruit new testers, and analyze your test coverage.\n\nThe following features are currently supported:\n\n 1. **Collect crash reports:** If your app crashes, a crash log is written to the device\u0027s storage. If the user starts the app again, they will be asked asked to submit the crash report to HockeyApp. This works for both beta and live apps, i.e. those submitted to the App Store. Crash logs contain viable information for you to help resolve the issue. Furthermore, you as a developer can add additional information to the report as well.\n\n 2. **User Metrics**: Understand user behavior to improve your app. Track usage through daily and monthly active users, monitor crash impacted users, as well as customer engagement through session count. You can now track Custom Events in your app, understand user actions and see the aggregates on the HockeyApp portal. User Metrics requires a minimum API level of 14 (Android 4.x Ice Cream Sandwich).\n \n 3. **Update Ad-Hoc / Enterprise apps:** The app will check with HockeyApp if a new version for your Ad-Hoc or Enterprise build is available. If yes, it will show an alert view to the user and let him see the release notes, the version history and start the installation process right away.\n\n 4. **Update notification for app store:** If an update is available for your app on the app store, an alert can be displayed to the user to allow them to navigate to the listing for the update on the app store (Disabled by default).\n \n 5. **Feedback:** Besides crash reports, collecting feedback from your users from within your app is a great option to help with improving your app. You act on and answer feedback directly from the HockeyApp backend.\n\n 6. **Authenticate:** To help you stay in control of closed tester groups, you can identify and authenticate users against your registered testers with the HockeyApp backend. The authentication feature supports several ways of authentication.\n \n\n## Learn More\nLearn more about HockeyApp by visiting http://hockeyapp.net\n","Version":"4.1.0.3","Summary":"HockeyApp is a platform to collect live crash reports, get feedback from your users, distribute your betas, recruit new testers, and analyze your test coverage.","QuickStart":"## Obtain an App Identifier\n\nPlease see the [How to create a new app](http://support.hockeyapp.net/kb/about-general-faq/how-to-create-a-new-app) tutorial. This will provide you with a HockeyApp specific App Identifier to be used to initialize the SDK.\n\n## Add crash reporting\n\nThis will add crash reporting capabilities to your app.\n\nIn your `MainActivity.cs` file, add the following lines:\n\n```csharp\nusing HockeyApp.Android;\n\nnamespace YourNameSpace\n{\n\t[Activity(Label = \"Your.App\", MainLauncher = true, Icon = \"@mipmap/icon\")]\n\tpublic class MainActivity : Activity \n\t{\n\t\tprotected override void OnCreate(Bundle savedInstanceState) \n\t\t{\n\t\t\tbase.OnCreate(savedInstanceState);\n\n\t\t\t// ... your own OnCreate implementation\n\t\t\tCrashManager.Register(this, \"Your-App-Id\");\n\t\t}\n\t}\n}\n```\n\nWhen the app is resumed, the crash manager is triggered and checks if a new crash was created before. If a previous crash is detected, it presents a dialog to ask the user whether they want to send the crash log to HockeyApp. On app launch the crash manager registers a new exception handler to recognize app crashes.\n\n## Add AppId to manifest\n\nAdd the following assembly level attribute in `Properties/AssemblyInfo.cs`\n\n```csharp\n[assembly: MetaData (\"net.hockeyapp.android.appIdentifier\", Value=\"Your-Api-Key\")]\n```\n\nThis will allow you to set your AppId once and simplify register calls\n\n```csharp\nusing HockeyApp.Android;\n\nnamespace YourNameSpace\n{\n\t[Activity(Label = \"Your.App\", MainLauncher = true, Icon = \"@mipmap/icon\")]\n\tpublic class MainActivity : Activity \n\t{\n\t\tprotected override void OnCreate(Bundle savedInstanceState) \n\t\t{\n\t\t\tbase.OnCreate(savedInstanceState);\n\n\t\t\t// ... your own OnCreate implementation\n\t\t\tCrashManager.Register(this);\n\t\t}\n\t}\n}\n```\n\n## Add User Metrics\n\nHockeyApp automatically provides you with nice, intelligible, and informative metrics about how your app is used and by whom.\n\n- **Sessions**: A new session is tracked by the SDK whenever the containing app is restarted (this refers to a \u0027cold start\u0027, i.e. when the app has not already been in memory prior to being launched) or whenever it becomes active again after having been in the background for 20 seconds or more.\n- **Users**: The SDK anonymously tracks the users of your app by creating a random UUID.\n\nOn Android, User Metrics is not automatically gathered, you have to start this manually:\n\n```csharp\n// add the HockeyApp namespace\nusing HockeyApp.Android.Metrics;\n\n// in your main activity OnCreate-method add:\nMetricsManager.Register(this, Application, \"$Your_App_Id\");\n```\n\n## Add Custom Events\n\nHockeyApp allows you to track custom events to understand user actions inside your app.\n\n**Please note:** To use custom events, please first make sure that User Metrics is set up correctly, e.g. you registered the MetricsManager.\n\n1. Make sure to add the correct namespace:\n  ```csharp\n  using HockeyApp;\n  using System.Collections.Generic;\n  ```\n\n2. Track custom events like this:\n  ```csharp\n  HockeyApp.MetricsManager.TrackEvent(\"Custom Event\");\n  ```\n  if you want to add custom properties or measurements, use this:\n\n  ```csharp\n  HockeyApp.MetricsManager.TrackEvent(\n    \"Custom Event\",\n    new Dictionary\u003cstring, string\u003e { { \"property\", \"value\" } },\n    new Dictionary\u003cstring, double\u003e { { \"time\", 1.0 } }\n  )\n  ```\n\n## Add Update Distribution\n\nThis will add the in-app update mechanism to your app. \n\nOpen the activity where you want to inform the user about eventual updates. We\u0027ll assume you want to do this on startup of your main activity.\n\nAdd the following lines and make sure to always balance `Register(...)` calls to SDK managers with `Unregister()` calls in the corresponding lifecycle callbacks:\n\n```csharp\nusing HockeyApp.Android;\n\nnamespace YourNameSpace \n{\n\t[Activity(Label = \"Your.App\", MainLauncher = true, Icon = \"@mipmap/icon\")]\n\tpublic class YourActivity : Activity \n\t{\n\t\tprotected override void OnCreate(Bundle savedInstanceState) \n\t\t{\n\t\t\tbase.OnCreate(savedInstanceState);\n\t\n\t\t\t// Your own code to create the view\n\t\t\t// ...\n   \n\t\t\tCheckForUpdates();\n\t\t}\n\n\t\tvoid CheckForUpdates()\n\t\t{\n\t\t\t// Remove this for store builds!\n\t\t\tUpdateManager.Register(this, \"Your_App_Id\");\n\t\t}\n\n\t\tvoid UnregisterManagers() \n\t\t{\n\t\t\tUpdateManager.Unregister();\n\t\t}\n\n\t\tprotected override void OnPause() \n\t\t{\n\t\t\tbase.OnPause();\n\t\t\t\n\t\t\tUnregisterManagers();\n\t\t}\n\n\t\tprotected override void OnDestroy()\n\t\t{\n\t\t\tbase.OnDestroy();\n\t\t\t\n\t\t\tUnregisterManagers();\n\t\t}\n\t}\n}\n```\n\nWhen the activity is created, the update manager checks for new updates in the background. If it finds a new update, an alert dialog is shown and if the user presses Show, they will be taken to the update activity. The reason to only do this once upon creation is that the update check causes network traffic and therefore potential costs for your users.\n\n\n\n## Add in-app feedback\n\nThis will add the ability for your users to provide feedback from right inside your app. \n\nYou\u0027ll typically only want to show the feedback interface upon user interaction, for this example we assume you have a button `feedback_button` in your view for this.\n\nAdd the following lines to your respective activity, handling the touch events and showing the feedback interface:\n\n```csharp\nusing HockeyApp.Android;\n\nnamespace YourNameSpace\n{\n\tpublic class YourActivity : Activitiy\n\t{\n\t\tprotected override void OnCreate(Bundle savedInstanceState)\n\t\t{\n\t\t\tbase.OnCreate(savedInstanceState);\n   \t\t\t// Your own code to create the view\n\t\t\t// ...\n\n\t\t\tFeedbackManager.Register(this, \"Your-App-Id\");\n\n\t\t\tvar feedbackButton = FindViewById\u003cButton\u003e(Resource.Id.feedback_button);\n\n\t\t\tfeedbackButton.Click += delegate {\n\t\t\t\tFeedbackManager.ShowFeedbackActivity(ApplicationContext);\n\t\t\t});\n\t\t}\n\t}\n}\n```\n\nWhen the user taps on the feedback button it will launch the feedback interface of the HockeySDK, where the user can create a new feedback discussion, add screenshots or other files for reference, and act on their previous feedback conversations.\n\n\n## Add authentication\n\nYou can force authentication of your users through the `LoginManager` class. This will show a login screen to users if they are not fully authenticated to protect your app.\n\nRetrieve your app secret from the HockeyApp backend. You can find this on the app details page in the backend right next to the ***App ID*** value. Click ***Show*** to access it.\n\nOpen the activity you want to protect, if you want to protect all of your app this will be your main activity.\n\nAdd the following lines to this activity:\nusing HockeyApp.Android;\n\n```csharp\nnamespace YourNameSpace\n{\n\t[Activity(Label = \"Your.App\", MainLauncher = true, Icon = \"@mipmap/icon\")]\n\tpublic class YourActivity : Activity\n\t{\n\t\tprotected override void OnCreate(Bundle savedInstanceState)\n\t\t{\n\t\t\tbase.OnCreate(savedInstanceState);\n\t\t\t// Your own code to create the view\n\t\t\t// ...\n\t\t\t\n\t\t\tLoginManager.Register(this, APP_SECRET, \t\t\t\tLoginManager.LOGIN_MODE_EMAIL_PASSWORD);\n\t\t\t\tLoginManager.VerifyLogin(this, Intent);\n\t\t}\n\t}\n}\n```\n\nMake sure to replace ***APP_SECRET*** with the value retrieved in the first step. This will launch the login activity every time a user launches your app.\n\n\n\n### Permissions\n\nPermissions get automatically merged into your manifest. If your app does not use update distribution you might consider removing the ***Write External Storage*** permission.\n\n\n### Control output to LogCat\n\nYou can control the amount of log messages from HockeySDK that show up in LogCat. By default, we keep the noise as low as possible, only errors will show up. To enable additional logging, i.e. while debugging, add the following line of code:\n\n```csharp\nHockeyLog.LogLevel(3);\n```\n\nThe different log levels match Android\u0027s own log levels.\n\n```csharp\nHockeyLog.LogLevel(2); // Verbose, show all log statements\nHockeyLog.LogLevel(3); // Debug, show most log statements – useful for debugging\nHockeyLog.LogLevel(4); // Info, show informative or higher log messages\nHockeyLog.LogLevel(5); // Warn, show warnings and errors\nHockeyLog.LogLevel(6); // Error, show only errors – the default log level\n```\n\n## More Information\n\nFor more information, see the [HockeySDK for Xamarin Source Repository](https://github.com/bitstadium/HockeySDK-Xamarin)\n","Hash":"f2cec19d38003d18e44890552f757ff7","TargetPlatforms":["android"],"TrialHash":null}